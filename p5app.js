

var s = function( sketch ) {

    "use strict";

    // to improve performances
    //  https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#use-native-js-in-bottlenecks
    p5.disableFriendlyErrors = true;

    // Function used for performance measurements
    function calc_time_diff(timestamp1, timestamp2) {
        var tmp_s = Math.floor((timestamp2 - timestamp1) / 1000);
        var tmp_m = 0;
        var tmp_h = 0;
        if (tmp_s >= 60) {
            tmp_m = Math.floor(tmp_s / 60);
            tmp_s = Math.floor(tmp_s - (tmp_m * 60));
            if (tmp_m >= 60) {
                tmp_h = Math.floor(tmp_m / 60);
                tmp_m = Math.floor(tmp_m - (tmp_h * 60));
            }
        }
        if (tmp_m < 10) {
            tmp_m = '0' + tmp_m;
        }
        if (tmp_s < 10) {
            tmp_s = '0' + tmp_s;
        }
        return tmp_h + ':' + tmp_m + ':' + tmp_s;
    }

    var curr_zoom = myGlobals.params.current_zoom ;
    //var flag_rezoom = myGlobals.params.flag_rezoom;
    var zoom_buffer;

    var datas, idx_dataset, cur_dataset, max_dataset;
    var max_colors = 256;

    var myWorker = new Worker('mandelbrot2_worker.js');
    var timer_start = new Date();

    var canvas_width = 1200;
    var canvas_height = canvas_width;

    var color_mode = myGlobals.params.color_mode; // a=RGB ; b=HSL ; c=HSB

    // cnv0 : <img> tag below the canvas
    // cnv1 : <canvas> generated by P5
    var cnv0, cnv1;

    // generation of the <img> tag (will be placed below the canvas)
    var canvases = document.getElementById('canvases');
    if (!canvases) {
        console.log('div with id "canvases" is not in the DOM');
    } else {
        cnv0 = new Image() ; // document.createElement('img');
        cnv0.crossOrigin = "Anonymous";
        cnv0.setAttribute('id', 'canvas0');
        cnv0.setAttribute('style', 'z-index:1; position: absolute; left: 0px; top: 80px;');
        cnv0.setAttribute('width', canvas_width);
        cnv0.setAttribute('height', canvas_height);
        canvases.append(cnv0);
    }

    // Prépare the worker
    myWorker.onmessage = function (e) {
        // detect the stop condition of the WebWorker
        if (e.data.length == 1 && e.data[0] == 'XXX') {
            datas.push(e.data);
            var timer_end = new Date();
            var message = 'Webworker ended normally after (draw function works) : ' 
                    + calc_time_diff(timer_start, timer_end);
            console.log(message);
            console.log('Nombre de tableaux à traiter : ', datas.length);
        } else {
            if (cur_dataset == null) {
                cur_dataset = 0;
                idx_dataset = 0;
                max_dataset = null;
            }
            datas.push(e.data);
        }
    };
    
    // Color Change (a=RGB, b=HSL, c=HSB)
    function colormode_switch(value) {
        myGlobals.params.color_mode = value;
        color_mode = value;
        cur_dataset = 0;
        idx_dataset = 0;
        max_dataset = null;
        myGlobals.params.flag_rezoom = false;
    }
    
    // Focal change
    function datazoom_switch(number) {
        number = parseInt(number);
        if (myGlobals.zooms[number]) {
            myGlobals.params.x1 = myGlobals.zooms[number].x1;
            myGlobals.params.x2 = myGlobals.zooms[number].x2;
            myGlobals.params.y1 = myGlobals.zooms[number].y1;
            myGlobals.params.y2 = myGlobals.zooms[number].y2;
            myGlobals.params.lim = myGlobals.zooms[number].lim;
            myGlobals.params.force_rezoom = false;
            myGlobals.params.save_pict = false;
        }
    }
    
// Solution de sauvegarde abandonnée car ne fonctionnait qu'avec Chrome
//    function save_picture() {
//        var tmp_name = "mandelbrot-zoom-" + sketch.frameCount + ".png";       
//        
//        var link = document.createElement('a');
//        link.innerHTML = 'Save picture';
//
//        setTimeout(function () {
//            console.log('save picture '+tmp_name);
//            link.href = cnv0.src;
//            link.download = tmp_name;
//            link.target = '_blank';
//           link.click();
//        }, 0);
//    }
    function save_picture() {
        var tmp_name = "mandelbrot-zoom-" + sketch.frameCount ;       
        // copie provoisoire de l'image sur le canvas pour sauvegarde
        cnv1.elt.getContext('2d').drawImage(cnv0, 0, 0);
        // on profite de la fonction saveCanvas fournie par P5
        sketch.saveCanvas(cnv1, tmp_name, 'png');
        // vidage du canvas 
        cnv1.clear();
    }

    sketch.setup = function() {
        var target = document.getElementById('canvases');

        cnv1 = sketch.createCanvas(canvas_width, canvas_height);
        cnv1.elt.setAttribute('id', 'canvas1');
        cnv1.elt.setAttribute('style', 'z-index:2;position:absolute;left:0px;top:80px;width:'+canvas_width+'px; height:'+canvas_height+'px;');
        cnv1.elt.setAttribute('width', canvas_width );
        cnv1.elt.setAttribute('height', canvas_height );
        cnv1.parent(canvases);
        cnv1.background(255);

        datazoom_switch(curr_zoom);

        datas = [];
        cur_dataset = null;
        idx_dataset = null;
        max_dataset = null;

        myWorker.postMessage([myGlobals.params.x1, myGlobals.params.y1, 
            myGlobals.params.x2, myGlobals.params.y2, canvas_width, canvas_height, 
            myGlobals.params.lim, myGlobals.params.lim, 
            max_colors]); // Sending message as an array to the worker

    };

    sketch.draw = function() {
        if (myGlobals.params.save_pict === true) {
            myGlobals.params.save_pict = false;
            save_picture();
        }
        
        if (color_mode != myGlobals.params.color_mode) {
            // detect a color changing via the menu (external to P5)
            colormode_switch(myGlobals.params.color_mode);
        }
        if (curr_zoom != myGlobals.params.current_zoom || myGlobals.params.force_rezoom) {
            myGlobals.params.force_rezoom = false;
            curr_zoom = myGlobals.params.current_zoom;
            datazoom_switch(curr_zoom);
            myGlobals.params.flag_restart = true;
            myGlobals.params.flag_rezoom = false;
            cur_dataset == null;
        }
        if (myGlobals.params.flag_rezoom) {
            if (cur_dataset == null) {
                cnv1.clear();
                overlay();
            }
            
        }
        if (cur_dataset == null || datas[cur_dataset] == undefined) {
            // nothing to do, we wait, unless a recalculation request
            //   is in the "pipe"

            if (myGlobals.params.flag_restart) {
                myGlobals.params.flag_rezoom = false;
                myGlobals.params.flag_restart = false;

                // clear the picture saved to avoid an unpleasant glitch effect
                //  during the copy of the picture, from the canvas to 
                //  the "img" tag
                cnv0.setAttribute('src', null);
                datas = [];
                cur_dataset = null;
                idx_dataset = null;
                max_dataset = null;
                console.log('relance');
                myWorker.postMessage([myGlobals.params.x1, myGlobals.params.y1, 
                    myGlobals.params.x2, myGlobals.params.y2, canvas_width, 
                    canvas_height, myGlobals.params.lim, myGlobals.params.lim, 
                    max_colors]); // Sending message as an array to the worker    
            }
        } else {
            // could be use to reverse the Y axis (but not activated here)
            //cnv1.scale(1, -1);
            //cnv1.translate(0, -height);

            if (max_dataset == null) {
                if (cur_dataset == null) {
                    cur_dataset = 0;
                }
                max_dataset = datas[cur_dataset].length;
                idx_dataset = 0;
            }
            if (idx_dataset < max_dataset) {
                // on affiche le dataset courant
                while (idx_dataset < max_dataset) {
                    var data = datas[cur_dataset][idx_dataset];

                    var c;
                    if (color_mode == 'a') {
                        var tmp_b = data.c + 20;
                        c = sketch.color('rgb(' + data.c + ',' + data.c + ',' + 
                                tmp_b + ')');
                    } else {
                        if (color_mode == 'b') {
                            c = sketch.color('hsl(' + data.c + ', 100%, 50%)');
                        } else {
                            c = sketch.color('hsb(' + data.c + ', 100%, 50%)');
                        }
                    }
                    cnv1.stroke(c);
                    cnv1.point(data.x, data.y);
                    idx_dataset += 1;
                }
                // on passe au dataset suivant
                cur_dataset += 1;
                idx_dataset = 0;
                max_dataset = null;
            }
            if (datas[cur_dataset] == 'XXX') {
                cur_dataset = null; // mise en sommeil du code relatif au tracé du graphe
                var timer_end = new Date();
                var message = 'graph ended normally after : ' + 
                        calc_time_diff(timer_start, timer_end);
                console.log(message);
                myGlobals.params.flag_rezoom = true;

                // copie de l'image dans la balise "img" en dessous du canvas
                cnv0.setAttribute('src', cnv1.elt.toDataURL("image/png"));
            }
        }
    };

    // Draw the zoom above the canvas
    function overlay() {
        sketch.strokeWeight(1);
        sketch.stroke(0, 0, 255, 75);
        sketch.fill(0, 0, 255, 75);
        sketch.rectMode(sketch.CENTER);
        sketch.rect(sketch.mouseX, sketch.mouseY, 100, 100);
    }

    sketch.mousePressed = function() {
        if (!myGlobals.params.flag_rezoom) {
            // zoom not available for the moment
            return;
        }
        if (sketch.mouseX < 0 || sketch.mouseX > canvas_width || 
                sketch.mouseY < 0 || sketch.mouseY > canvas_height) {
            // we are not in the canvas, get out !
            return;
        }
        cur_dataset == null
        myGlobals.params.flag_restart = true;
        let tx1 = sketch.map((sketch.mouseX - 50), 0, canvas_width, 
            myGlobals.params.x1, myGlobals.params.x2, true);
        let ty1 = sketch.map((sketch.mouseY - 50), 0, canvas_height, 
            myGlobals.params.y1, myGlobals.params.y2, true);
        let tx2 = sketch.map((sketch.mouseX + 50), 0, canvas_width, 
            myGlobals.params.x1, myGlobals.params.x2, true);
        let ty2 = sketch.map((sketch.mouseY + 50), 0, canvas_height, 
            myGlobals.params.y1, myGlobals.params.y2, true);
        myGlobals.params.x1 = tx1;
        myGlobals.params.y1 = ty1;
        myGlobals.params.x2 = tx2;
        myGlobals.params.y2 = ty2;
        var tmp_lim = myGlobals.params.lim * 2;
        if (tmp_lim > 3000) {
            // increase the precision but not too much
            myGlobals.params.lim = 3000;
        } else {
            myGlobals.params.lim = tmp_lim;
        }
        
        console.log(myGlobals.params.x1, myGlobals.params.y1, 
            myGlobals.params.x2, myGlobals.params.y2, myGlobals.params.lim);
        myGlobals.params.flag_rezoom = false;
        // Clean the canvas for new drawing
        cnv1.background(255);
        
    };

    sketch.keyPressed = function() {
        // console.log(keyCode);
        var tmpkey = sketch.key.toLowerCase();
        if (tmpkey == 'x') {
            myWorker.terminate();
            noLoop();
        } else {
            if (tmpkey == 's') {
                save_picture();
            } else {
                if (tmpkey == 'a' || tmpkey == 'b' || tmpkey == 'c') {
                    colormode_switch(tmpkey);
                } else {
    //                var tmpkey = parseInt(tmpkey) - 1;
    //                if (tmpkey >= 0 && tmpkey <= 9) {
    //                    myGlobals.params.current_zoom = tmpkey;
    //                    datazoom_switch(myGlobals.params.current_zoom);
    //                    myGlobals.params.flag_restart = true;
    //                    console.log('Recalcul demandé pour zoom n° ', tmpkey);
    //                }
                }
            }
        }
    }

};

var myp5 = new p5(s);